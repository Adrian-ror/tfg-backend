<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

	<!-- POM Version -->
	<modelVersion>4.0.0</modelVersion>


	<!-- General -->
	<!--
        groupId – A unique base name of the company or group that created the project
        artifactId – A unique name of the project
        version – A version of the project
     -->



	<!-- Parent POM-->
	<!-- This inherits many default configurations from Spring Boot, simplifying project setup. -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.3</version>
		<relativePath/><!-- lookup parent from repository -->
		<!-- This element specifies the relative path from the current directory to the parent POM directory.
		If left blank, as in this case, Maven will look for the parent POM in the remote repositories defined
		in the Maven settings (settings.xml).
		If no parent POM is found in the local repository, Maven will try to download it from the remote repository.-->
	</parent>


	<!-- Project Information -->

	<groupId>es.udc.tfg</groupId>
	<artifactId>tfg-project-backend</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<!--This can be in the standard Maven release format (e.g. 1.0.0)
	or you can use the SNAPSHOT convention to indicate that it is a development release.
	In this case, the version is 0.0.1-SNAPSHOT-->
	<name>tfg-project-backend</name>
	<description>TFG Project Backend</description>
	<!--It is good practice to include a description to help other developers understand the purpose of the project.-->


	<!-- Properties -->
	<!-- Several properties are defined that can be used in different parts of the project. -->
	<properties>

		<!--  Data source properties -->
        <!-- Database properties -->
        <dataSource.user>root</dataSource.user>
        <dataSource.password>hVnvZntUNmXmAhnfvsAbszpnmeSqvTfm</dataSource.password>
        <dataSource.host>mysql.railway.internal</dataSource.host>
        <dataSource.port>3306</dataSource.port>
        <dataSource.database>railway</dataSource.database>
        <dataSource.url>jdbc:mysql://root:hVnvZntUNmXmAhnfvsAbszpnmeSqvTfm@autorack.proxy.rlwy.net:21707/railway?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</dataSource.url>

        <testDataSource.user>${dataSource.user}</testDataSource.user>
        <testDataSource.password>${dataSource.password}</testDataSource.password>
        <testDataSource.url>${dataSource.url}</testDataSource.url>

		<!--  Compiler options -->
		<!--Defines the character encoding used for project source files.-->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!--Defines the character encoding used for the reports generated by Maven.-->
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>17</java.version>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>

		<!-- Package versions -->
		<jjwt.version>0.11.5</jjwt.version>

		<!-- Plugin versions -->
		<surefireMavenPlugin.groupId>org.apache.maven.plugins</surefireMavenPlugin.groupId>
		<surefireMavenPlugin.artifactId>maven-surefire-plugin</surefireMavenPlugin.artifactId>
		<surefireMavenPlugin.version>3.0.0-M5</surefireMavenPlugin.version>
		<!--Defines the version of the SQL Maven plugin used to run SQL scripts during project construction.-->
		<sqlPlugin.version>1.5</sqlPlugin.version>

	</properties>



	<!-- Profiles -->
	<!--Profiles in Maven are used to define sets of settings that can be turned on or off based on certain conditions.-->
	<profiles>
		<profile>
			<id>mysql</id>
			<!--This profile is activated by default.-->
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<!--These properties are used to configure the JDBC driver and the data source URL.-->
			<properties>
				<!-- JDBC driver properties -->
				<jdbcDriver.groupId>com.mysql</jdbcDriver.groupId>
				<jdbcDriver.artifactId>mysql-connector-j</jdbcDriver.artifactId>
				<jdbcDriver.version>8.0.33</jdbcDriver.version>
				<jdbcDriver.className>com.mysql.cj.jdbc.Driver</jdbcDriver.className>

				<dataSource.createTablesScript>1-MySQLCreateTables.sql</dataSource.createTablesScript>
				<dataSource.createDataScript>2-MySQLCreateData.sql</dataSource.createDataScript>

			</properties>
		</profile>
	</profiles>

	<!-- Dependencies -->
	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>


		<!-- Provides all the dependencies needed to work with JPA in a Spring Boot application. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- Provides the dependencies necessary to add security features to a Spring Boot application. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>


		<!-- Provides the dependencies necessary for data validation in a Spring Boot application. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!-- Provides all the dependencies needed to build web applications with Spring Boot. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Provides the dependencies necessary to work with WebSockets in a Spring Boot application. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>

		<!-- Provides development tools for a better runtime development experience.
		These tools include automatic application restart, among others. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<!-- Provides the dependencies necessary to write tests in a Spring Boot application.
		Includes testing libraries such as JUnit, Mockito, and others. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Provides testing tools to test the security of a Spring Security application.-->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Provides the MySQL JDBC driver configured in the corresponding profile.  -->
		<dependency>
			<groupId>${jdbcDriver.groupId}</groupId>
			<artifactId>${jdbcDriver.artifactId}</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!--Provides the core interfaces and classes for working with JWT.  -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>${jjwt.version}</version>
		</dependency>

		<!--Provides the implementation of the core interfaces and classes for working with JWT.  -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>${jjwt.version}</version>
		</dependency>

		<!--This dependency provides integration with the Jackson library for serializing and deserializing JWT-related objects.
		This is useful when you need to convert JWT tokens to Java objects and vice versa easily.  -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>${jjwt.version}</version>
		</dependency>


	</dependencies>


	<!-- Build -->
	<!-- The build section of the POM file contains the configuration for the Maven build process. -->
	<build>

		<!-- When using spring-boot-starter-parent, files under
             "src/main/resources" are automatically filtered and
             "@propertyName@" notation is used instead of "${propertyName}". -->

		<!--The testResources element specifies the location of test resources and
		how they should be handled during the build process.-->
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>

				<!--Indicates whether filters should be applied to test resources.
				 When set to true, as in this case, it means that test resources will be filtered during the build process.
				 This allows substitution of variables defined in test resources using the @propertyName@ notation
				 instead of ${propertyName}-->
				<filtering>true</filtering>
			</testResource>
		</testResources>

		<!--The plugins element specifies the plugins that will be used during the build process.-->
		<plugins>

			<!--The main purpose of this plugin is to allow packaging and running Spring Boot application within a
			Maven environment.-->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!--The Maven Surefire Plugin is used to run Unit tests.-->
			<plugin>
				<groupId>${surefireMavenPlugin.groupId}</groupId>
				<artifactId>${surefireMavenPlugin.artifactId}</artifactId>
				<version>${surefireMavenPlugin.version}</version>

				<!--The forkCount element specifies the number of parallel test processes to execute.-->
				<configuration>
					<forkCount>0</forkCount> <!-- 0 means that the tests will be run in the same JVM as Maven. -->
				</configuration>
			</plugin>

			<!--
                 - Configuration specifies onError="continue" since SQL scripts
                   try to drop tables before creating them (which causes errors
                   if such tables do not exist yet).

                 - Configuration specifies autocommit="true" since some drivers
                   (e.g the PostgreSQL JDBC 2 driver) do not commit changes if
                   some error ocurrs.
            -->

			<!--The SQL Maven Plugin is used to run SQL scripts during the build process.-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sql-maven-plugin</artifactId>
				<version>${sqlPlugin.version}</version>
				<dependencies>

					<!--The JDBC driver is added as a dependency to the SQL Maven plugin.-->
					<dependency>
						<groupId>${jdbcDriver.groupId}</groupId>
						<artifactId>${jdbcDriver.artifactId}</artifactId>
						<version>${jdbcDriver.version}</version>
					</dependency>
				</dependencies>
				<configuration>

					<!--Specifies the name of the JDBC driver class to use for the database connection.-->
					<driver>${jdbcDriver.className}</driver>
					<!--Specifies the URL of the database to connect to.-->
					<url>${dataSource.url}</url>
					<!--Specifies the username to use for the database connection.-->
					<username>${dataSource.user}</username>
					<!--Specifies the password to use for the database connection.-->
					<password>${dataSource.password}</password>
					<!--Specifies whether to commit changes automatically after each statement.-->
					<autocommit>true</autocommit>
					<!--Specifies what to do when an error occurs during the execution of a SQL script.-->
					<onError>continue</onError>
					<!--Specifies the order in which files (scripts SQL) should be executed.-->
					<orderFile>ascending</orderFile>

					<!--Defines the set of files that will be executed by the SQL plugin.-->
					<fileset>

						<!--Specifies the base directory where the files are located. (tfg-project-backend)-->
						<basedir>${basedir}</basedir>
						<!--Specifies the files to include in the execution.-->
						<includes>
							<include>
								src/sql/${dataSource.createTablesScript}
							</include>
							<include>
								src/sql/${dataSource.createDataScript}
							</include>
						</includes>
					</fileset>
				</configuration>

				<!--The execution element specifies the execution steps of the plugin during the build process.-->
				<executions>

					<!--Defines a plugin execution.-->
					<!--This execution is used to create the tables for the main database.-->
					<execution>
						<id>create-tables-for-testing</id>

						<!--Specifies the phase in which the execution will be run.-->
						<phase>process-test-resources</phase>

						<!--Specifies the goals of the execution.-->
						<goals>
							<goal>execute</goal>
						</goals>

						<!--Specifies the configuration for the execution.-->
						<configuration>
							<driver>${jdbcDriver.className}</driver>
							<url>${testDataSource.url}</url>
							<username>${testDataSource.user}</username>
							<password>${testDataSource.password}</password>
							<autocommit>true</autocommit>
							<onError>continue</onError>
							<fileset>
								<basedir>${basedir}</basedir>
								<includes>
									<include>
										src/sql/${dataSource.createTablesScript}
									</include>
								</includes>
							</fileset>
						</configuration>
					</execution>
					<execution>
						<id>execute-sql-scripts</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<driver>${jdbcDriver.className}</driver>
							<url>${dataSource.url}</url>
							<username>${dataSource.user}</username>
							<password>${dataSource.password}</password>
							<autocommit>true</autocommit>
							<onError>continue</onError>
							<fileset>
								<basedir>${basedir}</basedir>
								<includes>
									<include>src/sql/${dataSource.createTablesScript}</include>
									<include>src/sql/${dataSource.createDataScript}</include>
								</includes>
							</fileset>
						</configuration>
					</execution>



				</executions>
				
			</plugin>

		</plugins>

	</build>

</project>
